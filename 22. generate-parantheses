class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> result = new ArrayList<>();
        backtrack(result, n, "", 0, 0);
        
        return result;
    }
    
    public void backtrack(List<String> result, int n, String curr_str, int open, int close) {
                
        // Base case
        if (curr_str.length() == n * 2) {
            result.add(curr_str);
            return;
        }
        
        if (open < n)
            backtrack(result, n, curr_str + "(", open + 1, close);
        if (close < open)
            backtrack(result, n, curr_str + ")", open, close + 1);
    }
}
