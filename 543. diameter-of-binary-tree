/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int max = 0;
    
    public int diameterOfBinaryTree(TreeNode root) {
        getDiameter(root);
        
        if (max == 0) 
            return 0;
        else
            return (max - 1);
    }
    
    private int getDiameter(TreeNode root) {
        
        // Base case 
        if (root == null) {
            return 0;
        }
        
        int leftLength = getDiameter(root.left);
        int rightLength = getDiameter(root.right);
        int diameter =  leftLength + rightLength + 1;
        max = Math.max(max, diameter);
        
        return Math.max(leftLength, rightLength) + 1;
    }
}
