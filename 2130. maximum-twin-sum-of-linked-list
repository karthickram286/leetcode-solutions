/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    
    public int max = 0;
    
    public int pairSum(ListNode head) {
        ListNode slow = head, fast = head, temp = null;
        
        while(fast != null && fast.next != null && fast.next.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        temp = slow;
        
        // Head of second half 
        slow = slow.next;
        
        // Removing second half
        temp.next = null;
       
        // Reverse second half
        ListNode prev = null, curr = slow, next = curr;
        while(curr != null) {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
                
        // Find max
        // Prev is the head of second list
        while(head != null) {
            max = Math.max(head.val + prev.val, max);
            head = head.next;
            prev = prev.next;
        }
        
        return max;
    }
}
